import telebot
import time
import json 
import os
from telebot import types

bot = telebot.TeleBot('6137466158:AAFqIcQG4OUwyNB6W0_Ilrs2AwgDvIhO60w')
chat_id = 877378366

to_do = 'to_do.json'

def load_tasks():
    if os.path.exists(to_do):
        with open(to_do, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
def save_tasks(tasks):
    with open(to_do, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=['start'])
def start(command):
    print(f"[USER ACTION] New session started by user {command.chat.id}")
    bot.send_message(command.chat.id, '–ü—Ä–∏–≤–µ—Ç, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è :)', reply_markup=menu(), parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
def handle_add_task(message):
    msg = bot.send_message(message.chat.id, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:')
    bot.register_next_step_handler(msg, process_add_task)

def process_add_task(message):
    try:
        tasks = load_tasks()
        user_id = str(message.from_user.id)
        
        if user_id not in tasks:
            tasks[user_id] = []
        
        task_text = message.text.strip()
        if task_text:
            new_task_id = len(tasks[user_id]) + 1
            tasks[user_id].append({
                'text': task_text,
                'completed': False,
                'id': new_task_id
            })
            save_tasks(tasks)
            bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!", reply_markup=menu())
    except Exception as e:
        print(f"Error adding task: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", reply_markup=menu())

@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
def show_task(message):
    tasks = load_tasks()
    user_id = str(message.from_user.id)
    
    if user_id not in tasks or not tasks[user_id]:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!", reply_markup=menu())
        return
    
    task_list = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    for task in tasks[user_id]:
        status = "‚úÖ" if task['completed'] else "‚è≥"
        task_list += f"{status} {task['id']}. {task['text']}\n"
    
    bot.send_message(message.chat.id, task_list, parse_mode='Markdown', reply_markup=menu())

@bot.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É')
def complete_task_prompt(message):
    tasks = load_tasks()
    user_id = str(message.from_user.id)
    
    if user_id not in tasks or not tasks[user_id]:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!", reply_markup=menu())
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for task in tasks[user_id]:
        if not task['completed']:
            markup.add(types.InlineKeyboardButton(
                f"{task['id']}. {task['text'][:30]}...", 
                callback_data=f"complete_{task['id']}"
            ))
    
    if markup.keyboard:
        bot.send_message(message.chat.id, "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", reply_markup=menu())

@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
def delete_task_prompt(message):
    tasks = load_tasks()
    user_id = str(message.from_user.id)
    
    if user_id not in tasks or not tasks[user_id]:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=menu())
        return
    
    markup = types.InlineKeyboardMarkup()
    for task in tasks[user_id]:
        status = "‚úÖ" if task['completed'] else "‚è≥"
        markup.add(types.InlineKeyboardButton(
            f"{status} {task['id']}. {task['text'][:30]}...", 
            callback_data=f"delete_{task['id']}"
        ))
    
    bot.send_message(message.chat.id, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ')
def clear_all_tasks(message):
    tasks = load_tasks()
    user_id = str(message.from_user.id)
    
    if user_id in tasks and tasks[user_id]:
        tasks[user_id] = []
        save_tasks(tasks)
        bot.send_message(message.chat.id, "üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã!", reply_markup=menu())
    else:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!", reply_markup=menu())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    tasks = load_tasks()
    user_id = str(call.from_user.id)
    
    if user_id not in tasks:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    if call.data.startswith('complete_'):
        task_id = int(call.data.split('_')[1])
        for task in tasks[user_id]:
            if task['id'] == task_id:
                task['completed'] = True
                save_tasks(tasks)
                bot.answer_callback_query(call.id, f"‚úÖ –ó–∞–¥–∞—á–∞ '{task['text']}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                bot.edit_message_text(
                    "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                    call.message.chat.id,
                    call.message.message_id
                )
                break
    
    elif call.data.startswith('delete_'):
        task_id = int(call.data.split('_')[1])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        task_text = ""
        for task in tasks[user_id]:
            if task['id'] == task_id:
                task_text = task['text']
                break
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        tasks[user_id] = [task for task in tasks[user_id] if task['id'] != task_id]
        
        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for i, task in enumerate(tasks[user_id], 1):
            task['id'] = i
        
        save_tasks(tasks)
        bot.answer_callback_query(call.id, f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_text}")
        bot.edit_message_text(
            f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_text}",
            call.message.chat.id,
            call.message.message_id
        )

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìã *To-Do List Bot - –ü–æ–º–æ—â—å*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

*–ö–Ω–æ–ø–∫–∏:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
"""
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=menu())

@bot.message_handler(commands=['stats'])
def show_stats(message):
    tasks = load_tasks()
    user_id = str(message.from_user.id)
    
    if user_id not in tasks or not tasks[user_id]:
        bot.send_message(message.chat.id, "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!", reply_markup=menu())
        return
    
    total = len(tasks[user_id])
    completed = sum(1 for task in tasks[user_id] if task['completed'])
    pending = total - completed
    
    stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á*

–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {pending}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed/total*100:.1f}%
"""
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown', reply_markup=menu())

def menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
    markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
    markup.add('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ')
    return markup

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text not in ['–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ']:
        bot.send_message(message.chat.id, "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏", reply_markup=menu())

print("[SYSTEM] Starting bot...")
while True:
    try:
        print("[SYSTEM] Starting bot polling...")
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"[ERROR] Bot crashed: {e}")
        print("[SYSTEM] Restarting bot in 3 seconds...")
        time.sleep(3)